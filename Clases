//CLASE 3

//DEESTRUCTURAR

const [a,b] = [10,20]

const {name: university, city} = {name: 'Autonoma', city: 'Cali'}

console.log(a)
console.log(university)

const obj = {x:10, y:20, z:30}

//puedo escribir funciones regulares de dos formas

function oldRegularFunction (a,b){
    return a + b 
}

const newRegularFunction = function  (a,b) {
    return a + b
}

//puedo reemplazar una funcióon por una constante

//Otra forma de escribir una función

const arrowFunction = (a, b) => {
    return a + b
}

console.log (oldRegularFunction(2, 3))
console.log( newRegularFunction(2,3))
console.log(arrowFunction(2,3))

//ejercicio

const nuevaFuncion = function  (a) {
    if (a % 2 == 0) {
        return "true"
    } else { return "false"}
}

console.log (nuevaFuncion(2))

//puedo reemplazar una funcióon por una constante

//Otra forma de escribir una función

const funcionFlecha = (a) => {
    if (a % 2 == 0) {
        return "true"
    } else { return "false"}
}

console.log(funcionFlecha(3))

///

/* 
diferencias flecha y normal*/

//IMPORTAR

import {animals} from "./animals";
console.log (animals)

//animals.js

/* 
PROMMESA
algo que se puede cumplir // es una premisa

si la promesa se cumple tenemos un then
si no se cumple es un catch

*/

//ESTO ES PARA CREAR LA PROMESA
const promesa = new Promise ((resolve, reject) => {
    //  TFOFO
    resolve();
    reject();


})

promesa.then((data) =>{console.log(data)}).catch ( err => {
    console.log(err)
})

/// PROMESAS ASINCRONAS 
/* 
Is a function declared with the async keyword, and the
await keyword is permitted within it.
The async and await keywords enable asynchronous,
promise-based behavior to be written in a cleaner style,
avoiding the need to explicitly configure promise chains.

sincronia = secuencial
await = asincrona = espere que traiga la respuesta para seguir trabajando

switch - un caso para cada vez


*/

//CLASE 4

//LISTAS
/* UN NODO TIENE UN DATO Y EL APUNTADOR
La lista tiene nodos
listas: necesitan cabeza y cola
una lista vacia no tiene cabeza


Create and handle new list of TODOs.
Every task must have its title, description,
and points to next TODO.
Fill the list with some data and print all
TODOs

*/

class Node {
    constructor(value, next = null) {
      this.value = value;
      this.next = next;
    }
  }
  
  class LinkedList {
    constructor() {
      this.head = null;
      this.tail = null;
    }
  
    append(todo) {
      const newNode = new Node(todo);
  
      if (!this.head) {
        this.head = newNode;
      } else {
        this.tail.next = newNode;
      }
  
      this.tail = newNode;
    }
  
    print() {
      let current = this.head;
      while (current) {
        console.log(`Tarea: ${current.value.title}`);
        console.log(`Descripción: ${current.value.description}`);
        if (current.next) {
          console.log(`Siguiente tarea: ${current.next.value.title}`);
        } else {
          console.log("No hay tareas");
        }
        console.log("////*//////");
        current = current.next;
      }
    }
  }
  
  //Actividades
  const todo0 = {
    title: "Pensar que comer",
    description: "elegir que comer hoy",
  };
  const todo1 = {
    title: "Conseguir comida",
    description: "Ir a la tienda",
  };
  
  const todo2 = {
    title: "preparar comida",
    description: "picar y cocinar los ingredientes",
  };
  
  const todo3 = {
    title: "servir la comida",
    description: "Usar un plato y servir",
  };

  const todo4 = {
    title: "comer",
    description: "Comerme la comida",
  };
  
  // Create a new linked list
  const todoList = new LinkedList();
  
  // Append the TODOs to the list
  todoList.append(todo0);
  todoList.append(todo1);
  todoList.append(todo2);
  todoList.append(todo3);
  todoList.append(todo4);
  
  // Print all the TODOs
  todoList.print();

//CLASE 5 

